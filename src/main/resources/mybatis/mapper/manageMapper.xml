<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tour.hanbando.dao.ManageMapper">
  
  <!-- 패키지테이블 -->
  <resultMap type="PackageDto"          id="PackageMap">
    <id      column="PACKAGE_NO"        property="packageNo"/>
    <result  column="PACKAGE_TITLE"     property="packageTitle"/>
    <result  column="MINI_ONE"          property="miniOne"/>
    <result  column="MINI_TWO"          property="miniTwo"/>
    <result  column="MINI_THREE"        property="miniThree"/>
    <result  column="PACKAGE_PLAN"      property="packagePlan"/>
    <result  column="PACKAGE_CONTENTS"  property="packageContents"/>
    <result  column="HOTEL_CONTENTS"    property="hotelContents"/>
    <result  column="PRICE"             property="price"/>
    <result  column="DANGER"            property="danger"/>
    <result  column="CREATED_AT"        property="createdAt"/>
    <result  column="MODIFIED_AT"       property="modifiedAt"/>
    <result  column="HIT"               property="hit"/>
    <result  column="STATUS"            property="status"/>
    <result  column="MAX_PEOPLE"        property="maxPeople"/>
    <result  column="RECOMMEND_STATUS"  property="recommendStatus"/>
    <association javaType="RegionDto" property="regionDto">
      <id        column="REGION_NO"   property="regionNo"/>
      <result    column="REGION_NAME" property="regionName"/>
    </association>
    <association javaType="ThemeDto" property="themeDto">
      <id        column="THEME_NO"   property="themeNo"/>
    </association>
    <association javaType="UserDto" property="userDto">
      <id        column="USER_NO"   property="userNo"/>
    </association>
    <association javaType="ProductImageDto" property="productImageDto">
      <id        column="IMAGE_NO"          property="imageNo"/>
    </association>
  </resultMap>
    
  <!-- 호텔 테이블 -->
  <resultMap type="HotelDto"              id="HotelMap">
    <id      column="HOTEL_NO"          property="hotelNo" />
    <result  column="HOTEL_NAME"        property="hotelName" />
    <result  column="HOTEL_ADDRESS"     property="hotelAddress" />
    <result  column="LATITUDE"          property="latitude" />
    <result  column="LONGITUDE"         property="longitude" />
    <result  column="HOTEL_DETAIL"      property="hotelDetail" />
    <result  column="PHONE_NUMBER"      property="phoneNumber" />
    <result  column="H_EMAIL"           property="HEmail" />
    <result  column="CREATED_AT"        property="createdAt" />
    <result  column="MODIFIED_AT"       property="modifiedAt" />
    <result  column="HIT"               property="hit" />
    <result  column="STATUS"            property="status" />
    <result  column="RECOMMEND_STATUS"  property="recommendStatus" />
    <association javaType="RegionDto" property="regionDto">
      <id        column="REGION_NO"   property="regionNo"/>
      <result    column="REGION_NAME" property="regionName"/>
    </association>
  </resultMap>
  
  <!-- 리뷰 테이블 -->
  <resultMap type="ReviewDto"         id="ReviewMap">
    <id      column="REVIEW_NO"       property="reviewNo"/>
    <result  column="PACKAGE_NO"      property="packageNo" />
    <result  column="REVIEW_CONTENTS" property="reviewContents"/>
    <result  column="HOTEL_NO"        property="hotelNo" />
    <result  column="REGIST_AT"       property="registAt"/>
    <result  column="STAR"            property="star"/>
    <association javaType="UserDto"      property="userDto">
      <id        column="USER_NO"        property="userNo"/>
      <result    column="EMAIL"          property="email"/>
      <result    column="PW"             property="pw"/>
      <result    column="NAME"           property="name"/>
      <result    column="GENDER"         property="gender"/>
      <result    column="MOBILE"         property="mobile"/>
      <result    column="POSTCODE"       property="postcode"/>
      <result    column="ROAD_ADDRESS"   property="roadAddress"/>
      <result    column="JIBUN_ADDRESS"  property="jibunAddress"/>
      <result    column="DETAIL_ADDRESS" property="detailAddress"/>
      <result    column="AGREE"          property="agree"/>
      <result    column="STATE"          property="state"/>
      <result    column="AUTH"           property="auth"/>
      <result    column="PW_MODIFIED_AT" property="pwModifiedAt"/>
      <result    column="JOINED_AT"      property="joinedAt"/>
    </association>
  </resultMap>
	
  <!-- 회원 관리 목록 -->
  <select id="getUserCount" resultType="int">
    SELECT COUNT(*)
      FROM USER_T
  </select>

  <select id="getUserList" parameterType="Map" resultType="UserDto">
    SELECT USER_NO, EMAIL, PW, NAME, GENDER, MOBILE, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, AGREE, STATE, AUTH, PW_MODIFIED_AT, JOINED_AT
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY USER_NO DESC) AS RN, USER_NO, EMAIL, PW, NAME, GENDER, MOBILE, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, AGREE, STATE, AUTH, PW_MODIFIED_AT, JOINED_AT
              FROM USER_T)
     WHERE RN BETWEEN #{begin} AND #{end}
  </select>

  <!-- 회원 검색결과 목록 -->
  <select id="getSearchUserCount" parameterType="Map" resultType="int">
    SELECT COUNT(*)
      FROM USER_T
     WHERE ${column} LIKE '%' || #{query} || '%'
  </select>
  <select id="getSearchUser" parameterType="Map" resultType="UserDto">
    SELECT USER_NO, EMAIL, PW, NAME, GENDER, MOBILE, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, AGREE, STATE, AUTH, PW_MODIFIED_AT, JOINED_AT
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY USER_NO DESC) AS RN, USER_NO, EMAIL, PW, NAME, GENDER, MOBILE, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, AGREE, STATE, AUTH, PW_MODIFIED_AT, JOINED_AT
              FROM USER_T
             WHERE ${column} LIKE '%' || #{query} || '%')
     WHERE RN BETWEEN #{begin} AND #{end}
  </select>
  
  <!-- 찜목록 가져오기 -->

  
  
  <!-- 휴면회원 관리 목록 -->
  <select id="getInactiveCount" resultType="int">
    SELECT COUNT(*)
      FROM INACTIVE_USER_T
  </select>
  <select id="getInactiveList" parameterType="Map" resultType="InactiveUserDto">
    SELECT USER_NO, EMAIL, PW, NAME, GENDER, MOBILE, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, AGREE, STATE, AUTH, PW_MODIFIED_AT, JOINED_AT, INACTIVED_AT
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY INACTIVED_AT DESC) AS RN, USER_NO, EMAIL, PW, NAME, GENDER, MOBILE, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, AGREE, STATE, AUTH, PW_MODIFIED_AT, JOINED_AT, INACTIVED_AT
              FROM INACTIVE_USER_T)
     WHERE RN BETWEEN #{begin} AND #{end}
  </select>
  
  <!-- 휴면회원 검색결과 목록 -->
  <select id="getSearchInactiveCount" parameterType="Map" resultType="int">
    SELECT COUNT(*)
      FROM INACTIVE_USER_T
     WHERE ${column} LIKE '%' || #{query} || '%'
  </select>
  <select id="getSearchInactive" parameterType="Map" resultType="InactiveUserDto">
    SELECT USER_NO, EMAIL, PW, NAME, GENDER, MOBILE, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, AGREE, STATE, AUTH, PW_MODIFIED_AT, JOINED_AT, INACTIVED_AT
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY INACTIVED_AT DESC) AS RN, USER_NO, EMAIL, PW, NAME, GENDER, MOBILE, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, AGREE, STATE, AUTH, PW_MODIFIED_AT, JOINED_AT, INACTIVED_AT
              FROM INACTIVE_USER_T
             WHERE ${column} LIKE '%' || #{query} || '%')
     WHERE RN BETWEEN #{begin} AND #{end}
  </select>
  
  <!-- 휴면 회원 상세 -->
  <select id="getInactiveUser" parameterType="int" resultType="InactiveUserDto">
    SELECT USER_NO, EMAIL, PW, NAME, GENDER, MOBILE, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, AGREE, STATE, AUTH, PW_MODIFIED_AT, JOINED_AT, INACTIVED_AT
      FROM INACTIVE_USER_T
     WHERE USER_NO = #{userNo}
  </select>

  <!-- 탈퇴 회원 관리 목록 -->
  <select id="getLeaveUserCount" resultType="int">
    SELECT COUNT(*)
      FROM LEAVE_USER_T
  </select>
  <select id="getLeaveUserList" parameterType="Map" resultType="LeaveUserDto">
    SELECT EMAIL, JOINED_AT, LEAVED_AT
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY LEAVED_AT DESC) AS RN, EMAIL, JOINED_AT, LEAVED_AT
              FROM LEAVE_USER_T)
     WHERE RN BETWEEN #{begin} AND #{end}
  </select>
  
  <!-- 탈퇴 회원 검색 목록 -->
  <select id="getSearchLeaveCount" parameterType="Map" resultType="int">
    SELECT COUNT(*)
      FROM LEAVE_USER_T
     WHERE ${column} LIKE '%' || #{query} || '%'
  </select>
  <select id="getSearchLeaveList" parameterType="Map" resultType="LeaveUserDto">
    SELECT EMAIL, JOINED_AT, LEAVED_AT
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY LEAVED_AT DESC) AS RN, EMAIL, JOINED_AT, LEAVED_AT
              FROM LEAVE_USER_T
             WHERE ${column} LIKE '%' || #{query} || '%')
     WHERE RN BETWEEN #{begin} AND #{end}
  </select>
  
  <!-- 패키지 상품 목록 -->
  <select id="getPackageCount" resultType="int">
    SELECT COUNT(*)
      FROM PACKAGE_T
  </select>
  <select id="getPackageList" parameterType="Map" resultMap="PackageMap">
    SELECT A.PACKAGE_NO, A.USER_NO, A.REGION_NO, A.REGION_NAME, A.THEME_NO, A.PACKAGE_TITLE, A.MINI_ONE, A.MINI_TWO, A.MINI_THREE, A.PACKAGE_PLAN, A.PACKAGE_CONTENTS, A.HOTEL_CONTENTS, A.PRICE, A.DANGER, A.CREATED_AT, A.MODIFIED_AT, A.HIT, A.STATUS, A.MAX_PEOPLE, A.RECOMMEND_STATUS
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY P.PACKAGE_NO DESC) AS RN, P.PACKAGE_NO, P.USER_NO, P.REGION_NO, R.REGION_NAME, P.THEME_NO, P.PACKAGE_TITLE, P.MINI_ONE, P.MINI_TWO, P.MINI_THREE, P.PACKAGE_PLAN, P.PACKAGE_CONTENTS, P.HOTEL_CONTENTS, P.PRICE, P.DANGER, P.CREATED_AT, P.MODIFIED_AT, P.HIT, P.STATUS, P.MAX_PEOPLE, P.RECOMMEND_STATUS
              FROM PACKAGE_T P INNER JOIN REGION_T R
                ON R.REGION_NO = P.REGION_NO) A
     WHERE A.RN BETWEEN #{begin} AND #{end}
  </select>
  
  <!-- 패키지 상품 검색 -->
  
  <!-- 호텔 상품 목록 -->
  <select id="getHotelCount" resultType="int">
    SELECT COUNT(*)
      FROM HOTEL_T
  </select>
  <select id="getHotelList" parameterType="Map" resultMap="HotelMap">
    SELECT A.HOTEL_NO, A.REGION_NO, A.REGION_NAME, A.HOTEL_NAME, A.HOTEL_ADDRESS, A.LATITUDE, A.LONGITUDE, A.HOTEL_DETAIL, A.PHONE_NUMBER, A.H_EMAIL, A.CREATED_AT, A.MODIFIED_AT, A.HIT, A.STATUS, A.RECOMMEND_STATUS
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY H.HOTEL_NO DESC) AS RN, H.HOTEL_NO, H.REGION_NO, R.REGION_NAME, H.HOTEL_NAME, H.HOTEL_ADDRESS, H.LATITUDE, H.LONGITUDE, H.HOTEL_DETAIL, H.PHONE_NUMBER, H.H_EMAIL, H.CREATED_AT, H.MODIFIED_AT, H.HIT, H.STATUS, H.RECOMMEND_STATUS
              FROM REGION_T R INNER JOIN HOTEL_T H
                ON H.REGION_NO = R.REGION_NO) A
     WHERE A.RN BETWEEN #{begin} AND #{end}
  </select>
  
  <!-- 호텔 추천/비추천 변경 -->
  <update id="updateHotelRecommend" parameterType="HotelDto">
    UPDATE HOTEL_T
       SET RECOMMEND_STATUS = #{recommendStatus}
         , STATUS = #{status}
     WHERE HOTEL_NO = #{hotelNo}
  </update>
  
  <!-- 호텔 상품 검색 -->
  
  
  
  
  <!-- 예약 목록 -->
  <!-- 예약 검색 목록 -->
  <!-- 예약 상세 -->
  
  <!-- 리뷰 목록 -->
  <select id="getReviewCount" resultType="int">
    SELECT COUNT(*)
      FROM REVIEW_T
  </select>
  <select id="getReviewList" parameterType="Map" resultMap="ReviewMap">
    SELECT A.USER_NO, A.NAME, A.REVIEW_NO, A.PACKAGE_NO, A.HOTEL_NO, A.REVIEW_CONTENTS, A.STAR, A.REGIST_AT
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY REVIEW_NO DESC) AS RN, R.REVIEW_NO, R.PACKAGE_NO, R.HOTEL_NO, R.REVIEW_CONTENTS, R.STAR, R.REGIST_AT,
                   R.USER_NO, U.NAME
              FROM USER_T U INNER JOIN REVIEW_T R
                ON U.USER_NO = R.USER_NO) A
     WHERE RN BETWEEN #{begin} AND #{end}
  </select>
  
  <!-- 리뷰 검색 -->
  <select id="getSearchReviewCount" parameterType="Map" resultType="int">
    SELECT COUNT(R.REVIEW_NO)
      FROM USER_T U INNER JOIN REVIEW_T R
        ON U.USER_NO = R.USER_NO
      <where>
        <if test="columnGubun != ''">
          ${columnGubun} IS NOT NULL
        </if>
        <if test="column != null and query != null">
          AND ${column} LIKE '%' || #{query} || '%'
        </if>
      </where>   
  </select>
  <select id="getSearchReviewList" parameterType="Map" resultMap="ReviewMap">
    SELECT A.USER_NO, A.NAME, A.REVIEW_NO, A.PACKAGE_NO, A.HOTEL_NO, A.REVIEW_CONTENTS, A.STAR, A.REGIST_AT
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY R.REVIEW_NO DESC) AS RN, R.REVIEW_NO, R.PACKAGE_NO, R.HOTEL_NO, R.REVIEW_CONTENTS, R.STAR, R.REGIST_AT,
                   R.USER_NO, U.NAME
              FROM USER_T U INNER JOIN REVIEW_T R
                ON U.USER_NO = R.USER_NO
              <where>
                <if test="columnGubun != ''">
                  ${columnGubun} IS NOT NULL
                </if>
                <if test="column != null and query != null">
                  AND ${column} LIKE '%' || #{query} || '%'
                </if>
              </where>
            ) A
     WHERE A.RN BETWEEN #{begin} AND #{end}
  </select>

  <!-- 리뷰 삭제 -->
  <delete id="deleteReview" parameterType="int">
    DELETE
      FROM REVIEW_T
     WHERE REVIEW_NO = #{reviewNo}
  </delete>
  
  
  
  
  
  
  
</mapper>